if (completos > threshold){
datos.comletos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
vector.correlacion <- rbind(vector.correlacion, c(item,datos.correlacion))
}
}
names(vector.correlacion) <- c('monitor', 'cor')
vector.correlacion
}
corrtest(data.dir, archivos)
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
vector.correlacion <- data.frame()
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
vector.correlacion <- rbind(vector.correlacion, c(item,datos.correlacion))
}
}
names(vector.correlacion) <- c('monitor', 'cor')
vector.correlacion
}
corrtest(data.dir, archivos)
test <- data.frame(monitor = character(0), integer(0))
test
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
df.correlacion <- data.frame(monitor = characer(0), cor = numeric(0))
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
df.correlacion <- rbind(vector.correlacion, c(item,datos.correlacion))
}
}
# names(df.correlacion) <- c('monitor', 'cor')
df.correlacion
}
corrtest(data.dir, archivos)
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
df.correlacion <- data.frame(monitor = character(0), cor = numeric(0))
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
df.correlacion <- rbind(vector.correlacion, c(item,datos.correlacion))
}
}
# names(df.correlacion) <- c('monitor', 'cor')
df.correlacion
}
corrtest(data.dir, archivos)
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
df.correlacion <- data.frame(monitor = character(0), cor = numeric(0))
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
df.correlacion <- rbind(df.correlacion, c(item,datos.correlacion))
}
}
# names(df.correlacion) <- c('monitor', 'cor')
df.correlacion
}
corrtest(data.dir, archivos)
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
df.correlacion <- data.frame()
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
df.correlacion <- rbind(df.correlacion, c(as.character(item),datos.correlacion))
}
}
names(df.correlacion) <- c('monitor', 'cor')
df.correlacion
}
corrtest(data.dir, archivos)
rm(index.completos)
rm(test)
df.correlacion <- data.frame()
df.correlacion
df.correlacion <- cor(datosp.completos$nitrate, datosp.completos$sulfate)
datosp.completos
df.correlacion
datos.correlacion <- cor(datosp.completos$nitrate, datosp.completos$sulfate)
df.correlacion <- data.frame()
df.correlacion <- rbind(datos.correlacion, c("001.csv", datos.correlacion)
)
df.correlacion
rm(df.correlacion
)
rm(datos.correlacion)
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
df.correlacion <- data.frame()
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
df.correlacion <- rbind(df.correlacion, c("test",datos.correlacion))
}
}
names(df.correlacion) <- c('monitor', 'cor')
df.correlacion
}
corrtest(data.dir,archivos)
source(test.R)
debugSource('C:/Users/jcano/AnacondaProjects/data-science-r-basics/ejemplos/test.R')
source('C:/Users/jcano/AnacondaProjects/data-science-r-basics/ejemplos/test.R')
debugSource('C:/Users/jcano/AnacondaProjects/data-science-r-basics/ejemplos/test.R')
corrtest(data.dir,archivos)
print(item)
item
next
next()
print(item)
head(datos)
item
head(datos)
head(index.completos)
head(completos)
completos
head(datos.completos)
datos.correlacion
df.correlacion
df.correlaciono
df.correlacion
item
head(datos)
completos
head(datos.completos)
nrow(datos.completos)
completos
datos.correlacion
head(datos.completos)
tail(datos.completos)
df.correlacion
df.correlacion
class(df.correlacion$X.test.)
class(df.correlacion$X..0.222552560758546.)
corrtest <- function(directory, files, threshold = 0) {
# archivos <- list.files(file.path(directory))
datos <- data.frame()
vector.correlacion <- numeric()
puntero <- 0
for (item in files){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
index.completos <- complete.cases(datos)
completos <- sum(index.completos)
if (completos > threshold){
puntero <- puntero + 1
datos.completos <- datos[index.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
vector.correlacion[puntero] <- datos.correlacion
}
}
vector.correlacion
}
corrtest(data.dir, archivos)
corr <- function(directory, threshold = 0) {
## 'threshold' is a numeric vector of length1 indicating the
## number of completely observed observations (on all variables)
## required to compute the correlation between nitrate and sulfate
## the default is 0
## Return a numeric vector of correlations
## NOTE:
## Don't round the result!
## Don't call complete() in corr()!
archivos <- list.files(file.path(directory))
datos <- data.frame()
vector.correlacion <- numeric()
puntero <- 0
for (item in archivos){
datos <- read.csv(file.path(directory, item), stringsAsFactors = FALSE)
lista.completos <- complete.cases(datos)
completos <- sum(lista.completos)
if (completos > threshold){
puntero <- puntero + 1
datos.completos <- datos[lista.completos,]
datos.correlacion <- cor(datos.completos$nitrate, datos.completos$sulfate)
vector.correlacion [puntero] <- datos.correlacion
}
}
vector.correlacion
}
vector.cor <- corr(data.dir)
head(vector.cor)
vector.cor <- corr(data.dir, 150)
head(vector.cor)
summary(cr)
summary(vector.cor)
vector.cor <- corr(data.dir, 400)
head(vector.cor)
summary(vector.cor)
vector.cor <- corr(data.dir, 5000)
summary(vector.cor)
length(vector.cor)
vector.cor <- corr(data.dir)
summary(vector.cor)
length(vector.cor)
source('C:/Users/jcano/AnacondaProjects/data-science-r-basics/pollutantmean.R')
pollutantmean(data.dir, "sulfate", 1:10)
pollutantmean(data.dir,"nitrate", 70:72)
pollutantmean(data.dir, "sulfate", 34)
pollutantmean(data.dir,"nitrate")
cc <- complete(data.dir, c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete(data.dir, 54)
print(cc$nobs)
set.seed(42)
cc <- complete(data.dir, 332:1)
use <- sample(332,10)
print(cc[use,"nobs"])
cr <- corr(data.dir)
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr),5)],4)
print(out)
cr <- corr(data.dir, 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n,5)], 4))
print(out)
cr <- corr(data.dir, 2000)
n <- length(cr)
cr <- corr(data.dir, 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
b=rnomr(10)
b=rnorm(10)
b
1:5
b=rnorm(10)
b
x <- list(a=1:4, b = rnorm(10), c= rnorm(20,1), d = rnorm(100,5))
lapply(x,mean)
y <- lapply(x,mean)
class(y)
y
rnorm(10)
rnorm(5)
rnorm(100)
x <- array(rnorm(2*2*10), c(2,2,10))
x
library(datasets)
data("iris")
data("iris")
?iris
data('iris')
iris$Sepal.Length
mean(irsi$Sepal.Length)
mean(iris$Sepal.Length)
head(iris)
colMeans(iris)
?apply
apply(iris,1,mean)
apply(iris, 2, mean)
head(iris)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
head(iris[,1:4])
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcats
?mtcars
head(mtcars)
head(mtcars)
debug(ls)
ls
?ls
ls()
ls
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
ls()
ls()
ls
ls()
head(mtcars)
mean(mtcars$mpg)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg,cyl,mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
spply(mtcars,cyl,mean)
sapply(mtcars,cyl,mean)
stop(ls)
stop(ls)
ls
ls()
ls()
debug(ls)
ls()
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars,2,mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
spapply(split(mtcars$mpg, mtcars$cyl),mean())
spapply(split(mtcars$mpg, mtcars$cyl),mean
)
spapply(split(mtcars$mpg, mtcars$cyl),mean)
sapply(split(mtcars$mpg, mtcars$cyl),mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
?with
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
clear()
ls()
rm(ls())
rm(ls)
rm(list=ls())
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1,2,3,4)
cachemean(x)
printmessage <- function(x){}
if(x > 0)
print("x is greater than zero")
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(3)
printmessage(2)
printmessage(0)
View(printmessage)
View(printmessage)
printmessage(3)
View(printmessage)
View(printmessage)
View(printmessage)
?invisible
function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
View(printmessage)
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
View(printmessage)
pr9intmessage(3)
printmessage(3)
printmessage(4)
View(printmessage)
rm(printmessage)
source('~/.active-rstudio-document')
function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
# invisible(x)
}
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
# invisible(x)
}
printmessage(1)
printmessage(0)
printmessage(-1)
printmessage(NA)
result <- printmessage(3)
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
result <- printmessage(1)
printmessage(3)
printmessage(-1)
result <- printmessage(3)
rm(printmessage)
source('~/.active-rstudio-document')
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(-1)
result <- printmessage(3)
traceback(printmessage)
